name: Upload Beta Pre Release

on:
  ### Only trigger manually
  workflow_dispatch: {}

env:

  ### Must use this parameter, otherwise the version name will be very long
  ReleaseAndroIDE: true

  BUILD_JAVA_VERSION: '17'
  BUILD_JAVA_DIST: 'adopt'

  APK_OUTPUT_PATH: 'core/app/build/outputs/apk/release'
  APK_OUTPUT_FILE: 'app-arm64-v8a-release.apk'
  ARTIFACT_DIR: 'release-artifacts'
  INFO_FILE: 'RELEASE_INFO'

  ### Fixed tag name
  BETA_TAG: 'HaveNotReleasedYet'

jobs:
  build-beta-pre:
    name: Build BetaPre Release
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Set Short SHA And Date
        id: set_vars
        run: |
          ### Extract 7-character short commit hash
          echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          ### Generate date string in yymmdd format
          echo "current_date=$(date +'%y%m%d')" >> $GITHUB_OUTPUT

      - name: Read Release Information From File
        id: release_info
        run: |
          ### Check if INFO_FILE file exists
          if [ ! -f "${{ env.INFO_FILE }}" ]; then
            echo "${{ env.INFO_FILE }} file not found!"
            exit 1
          fi

          ### Extract VER_NAME value from INFO_FILE
          VER_NAME=$(grep '^VER_NAME=' ${{ env.INFO_FILE }} | cut -d'=' -f2- | tr -d '[:space:]')
          if [ -z "$VER_NAME" ]; then
            echo "VER_NAME not specified in ${{ env.INFO_FILE }}"
            exit 1
          fi

          ### Output the extracted VER_NAME to environment variable
          echo "my_tag=$VER_NAME" >> $GITHUB_OUTPUT

      - name: Check If Tag Exists
        id: check_beta_tag
        run: |
          ### Check if tag already exists
          if git rev-parse "${{ env.BETA_TAG }}" >/dev/null 2>&1; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "Tag ${{ env.BETA_TAG }} already exists"
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "Tag ${{ env.BETA_TAG }} will be created"
          fi

      ### Create tag only if it doesn't exist
      - name: Create And Push Tag (if not exists)
        if: ${{ steps.check_beta_tag.outputs.tag_exists == 'false' }}
        run: |
          ### Configure Git user information
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          
          ### Create and push tag
          git tag -a ${{ env.BETA_TAG }} -m "Beta pre-release tag"
          git push origin ${{ env.BETA_TAG }}
          echo "Created and pushed tag: ${{ env.BETA_TAG }}"
          
          ### Refresh local tag information
          git fetch --tags

      - name: Set Up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.BUILD_JAVA_VERSION }}
          distribution: ${{ env.BUILD_JAVA_DIST }}
          cache: 'gradle'

      - name: Make Gradlew Executable
        run: chmod +x ./gradlew

      - name: Restore Gradle Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Release APK
        run: ./gradlew :core:app:assembleRelease
        continue-on-error: false

      - name: Show APK Path
        run: |
          ### Display contents of APK output directory
          echo ">>>APK path:"
          ls -la ${{ env.APK_OUTPUT_PATH }}

      - name: Check If APK Exists
        run: |
          ### Check if APK file exists
          if [ ! -f "${{ env.APK_OUTPUT_PATH }}/${{ env.APK_OUTPUT_FILE }}" ]; then
            echo ">>APK file not found!"
            exit 1
          fi

      - name: Prepare Release Artifacts
        run: |
          ### Build artifact name: apk-arm64V8-myTAG-time-shortSHA
          ARTIFACT_NAME="${{ steps.set_vars.outputs.current_date }}-${{ steps.set_vars.outputs.short_sha }}-AndroIDE-arm64v8a-${{ steps.release_info.outputs.my_tag }}.apk"
          
          ### Create artifacts directory and copy files
          mkdir -p ${{ env.ARTIFACT_DIR }}
          cp ${{ env.APK_OUTPUT_PATH }}/${{ env.APK_OUTPUT_FILE }} ${{ env.ARTIFACT_DIR }}/$ARTIFACT_NAME
          
          ### Generate SHA256 checksum file
          sha256sum ${{ env.ARTIFACT_DIR }}/$ARTIFACT_NAME > ${{ env.ARTIFACT_DIR }}/$ARTIFACT_NAME.sha256
          
          ### Display prepared artifacts
          echo ">>>Prepared artifacts:"
          ls -la ${{ env.ARTIFACT_DIR }}
          
          ### Save artifact name for use in subsequent steps
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
        id: prepare_artifact

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          ### Use fixed release tag
          tag_name: ${{ env.BETA_TAG }}
          ### Title same as tag
          name: ${{ env.BETA_TAG }}
          ### Use fixed release description
          body: "The APKs have not been released yet."
          ### Upload built artifacts
          files: ${{ env.ARTIFACT_DIR }}/*
          ### Whether to set it as a draft 
          ### instead of releasing it directly
          draft: false
          ### Whether to mark as pre-release
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

