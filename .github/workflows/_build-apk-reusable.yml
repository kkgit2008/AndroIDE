# ===================================================================
#  Reusable : Can build all ABI/build-type and upload APK + mapping
#  NO LONGER reads $INFO_FILE —— all params come from caller inputs
# ===================================================================

name: --- Reusable Action ---

on:
  workflow_call:
    inputs:
      abi_type:
        description: 'e.g. arm64-v8a'
        required: true
        type: string
      build_type:
        description: 'debug or release'
        required: true
        type: string

      # Optional input parameters (has default value)
      override_releaseOrBuild:
        description: 'whether is publishing'
        required: false
        default: "false"
        type: string
      override_info_file:
        description: 'path to $INFO_FILE (repo root relative) – kept for compatibility, NOT read'
        required: false
        default: 'RELEASE_INFO'
        type: string

      # Optional input parameters (no default value)
      override_ver_name:
        description: ''
        required: false
        type: string
      override_title:
        description: ''
        required: false
        type: string
      override_branch:
        description: ''
        required: false
        type: string
      override_prerelease:
        description: ''
        required: false
        type: string
      override_notes:
        description: 'release notes body (publish only)'
        required: false
        type: string

env:
  # Output configuration
  APK_OUTPUT_DIR: 'core/app/build/outputs/apk/'
  ARTIFACT_OUTPUT_DIR: 'artifact_output/'

  # Signing info
  IDE_SIGNING_ALIAS: androiddebugkey
  IDE_SIGNING_KEY_PASS: android
  IDE_SIGNING_STORE_PASS: android

jobs:
  build:
    name: Build APK (${{ inputs.abi_type }},${{ inputs.build_type }})
    #runs-on: ubuntu-latest
    runs-on: ${{ fromJSON('["ubuntu-latest", "self-hosted"]')[github.repository == 'github/docs-internal'] }}
    outputs:
      ver_name:    ${{ steps.params.outputs.ver_name }}
      short_sha:    ${{ steps.params.outputs.short_sha }}
      title:    ${{ steps.params.outputs.title }}
      branch:    ${{ steps.params.outputs.branch }}
      prerelease:    ${{ steps.params.outputs.prerelease }}
      notes:    ${{ steps.params.outputs.notes }}

    steps:
      # ---------- 0. get caller inputs ----------
      - name: Export caller inputs
        id: params
        shell: bash
        run: |
          # ---- Common ----
          VER_NAME='${{ inputs.override_ver_name }}'
          #[ -z "$VER_NAME" ] && { echo "$VER_NAME missing or empty"; exit 1; }
          SHA="${GITHUB_SHA::7}"
          echo "ver_name=$VER_NAME"  >> $GITHUB_OUTPUT
          echo "short_sha=$SHA"      >> $GITHUB_OUTPUT

          PRERELEASE='${{ inputs.override_prerelease }}'
          echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT

          if [ "$PRERELEASE" = "false" ]; then
            VER_SUFFIX=""
          elif [ '${{ inputs.build_type }}' = "release" ]; then
            VER_SUFFIX="-dev-$SHA"
          else
            VER_SUFFIX="-devDebug-$SHA"
          fi
          echo "ver_suffix=$VER_SUFFIX" >> $GITHUB_OUTPUT

          # ---- Publish Only ----
          if [ '${{ inputs.override_releaseOrBuild }}' = "true" ]; then
            TITLE='${{ inputs.override_title }}'
            #[ -z "$TITLE" ] && TITLE="${VER_NAME} dev$(date +%Y%m%d)"
            echo "title=$TITLE" >> $GITHUB_OUTPUT

            BRANCH='${{ inputs.override_branch }}'
            #[ -z "$BRANCH" ] && { echo "BRANCH missing or empty"; exit 1; }
            echo "branch=$BRANCH" >> $GITHUB_OUTPUT

            NOTES='${{ inputs.override_notes }}'
            #[ -z "$NOTES" ] && { echo "NOTES missing or empty"; exit 1; }
            echo "notes<<EOF" >> $GITHUB_OUTPUT
            echo "$NOTES"     >> $GITHUB_OUTPUT
            echo "EOF"        >> $GITHUB_OUTPUT
          fi

      # ---------- 1. checkout ----------
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1

      # ---------- 2. JDK & Gradle ----------
      - name: Set Up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Restore Gradle Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/caches/build-cache-*
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # ---------- 3. build ----------
      - name: Build ${{ inputs.build_type }} APK
        run: |
          ./gradlew :core:app:assemble${{ inputs.build_type }} \
            -PversionSuffix="${{ steps.params.outputs.ver_suffix }}" \
            -PbaseVersion="${{ steps.params.outputs.ver_name }}"

      - name: Show APK_OUTPUT_DIR
        run: ls -laR ${{ env.APK_OUTPUT_DIR }}

      # ---------- 4. get artifact ----------
      - name: Copy & Rename APK
        run: |
          mkdir -p ${{ env.ARTIFACT_OUTPUT_DIR }}${{ inputs.abi_type }}
          SRC=$(find "$APK_OUTPUT_DIR" -name "app-${{ inputs.abi_type }}-${{ inputs.build_type }}.apk" | head -n 1)
          [ -z "$SRC" ] && { echo "APK file not found (abi: ${{ inputs.abi_type }}, build: ${{ inputs.build_type }}) at path:$APK_OUTPUT_DIR"; exit 1; }
          #SRC=${{ env.APK_OUTPUT_DIR }}${{ inputs.build_type }}/app-${{ inputs.abi_type }}-${{ inputs.build_type }}.apk
          DST=${{ env.ARTIFACT_OUTPUT_DIR }}${{ inputs.abi_type }}/AndroIDE-${{ inputs.abi_type }}-${{ steps.params.outputs.ver_name }}${{ steps.params.outputs.ver_suffix }}.apk
          cp "$SRC" "$DST"
          sha256sum "$DST" > "$DST.sha256"

      - name: Show Artifact Tree
        run: ls -laR ${{ env.ARTIFACT_OUTPUT_DIR }}

      # ---------- 5. upload ----------
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: AndroIDE-${{ inputs.abi_type }}-${{ steps.params.outputs.ver_name }}${{ steps.params.outputs.ver_suffix }}
          path: ${{ env.ARTIFACT_OUTPUT_DIR }}${{ inputs.abi_type }}/*

      - name: Upload Mapping (release only)
        if: ${{ inputs.build_type == 'release' }}
        uses: actions/upload-artifact@v4
        with:
          name: release-mappings-${{ steps.params.outputs.short_sha }}
          path: '**/build/outputs/mapping'
