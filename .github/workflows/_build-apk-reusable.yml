
# ===================================================================
#  Reusable : Can build all ABI/build-type and upload APK + mapping
#  Read $INFO_FILE and get params：
#    - VER_NAME          （Required）
#    - TITLE / BRANCH / PRERELEASE / NOTES  (Only read when publish)
# ===================================================================



name: --- Reusable Action ---

on:
  workflow_call:
  
    inputs:
    
      abi_type:
        description: 'e.g. arm64-v8a'
        required: true
        type: string
      build_type:
        description: 'debug or release'
        required: true
        type: string
      
      # Optional input parameters (has default value)
      
      override_IsPublish:
        description: 'whether is publishing'
        required: false
        default: "false"
        type: string
      override_info_file:
        description: 'path to $INFO_FILE (repo root relative)'
        required: false
        default: 'RELEASE_INFO'
        type: string
      
      # Optional input parameters (no default value)
      
      override_ver_name:
        description: ''
        required: false
        type: string
      override_short_sha:
        description: ''
        required: false
        type: string
      override_title:
        description: ''
        required: false
        type: string
      override_branch:
        description: ''
        required: false
        type: string
      override_prerelease:
        description: ''
        required: false
        type: string

    outputs:
      ver_name:
        description: 'parsed or overridden VER_NAME'
        value: ${{ jobs.build.outputs.ver_name }}
      short_sha:
        description: 'short SHA of the run'
        value: ${{ jobs.build.outputs.short_sha }}
      title:
        description: 'parsed or overridden TITLE (Publish only)'
        value: ${{ jobs.build.outputs.title }}
      branch:
        description: 'parsed BRANCH (release only)'
        value: ${{ jobs.build.outputs.branch }}
      prerelease:
        description: 'parsed or overridden PRERELEASE (Publish only)'
        value: ${{ jobs.build.outputs.prerelease }}
      notes:
        description: 'parsed NOTES (Publish only)'
        value: ${{ jobs.build.outputs.notes }}

env:
  # Output configuration
  APK_OUTPUT_DIR: 'core/app/build/outputs/apk/'
  ARTIFACT_OUTPUT_DIR: 'artifact_output/'

  # Signing info
  IDE_SIGNING_ALIAS: androiddebugkey
  IDE_SIGNING_KEY_PASS: android
  IDE_SIGNING_STORE_PASS: android


  #IDE_SIGNING_AUTH_PASS: ${{ secrets.IDE_SIGNING_AUTH_PASS }}
  #IDE_SIGNING_AUTH_USER: ${{ secrets.IDE_SIGNING_AUTH_USER }}
  #IDE_SIGNING_URL: ${{ secrets.IDE_SIGNING_URL }}
  #IDE_SIGNING_KEY_BIN: ${{ secrets.IDE_SIGNING_KEY_BIN }}
  ### Publishing credentials
  #ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MVN_USERNAME }}
  #ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MVN_PASSWORD }}
  #ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.MVN_SIGNING_KEY }}
  #ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.MVN_SIGNING_KEY_ID }}
  #ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.MVN_SIGNING_KEY_PASSWORD }}
  ### Build configuration
  #BUILD_IS_RELEASE: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release/**' }}
  #ReleaseAndroidIDE: ${{ github.ref == 'refs/heads/main' }}

jobs:
  build:
    name: Build APK (${{ inputs.abi_type }},${{ inputs.build_type }})
    #runs-on: ubuntu-latest
    runs-on: ${{ fromJSON('["ubuntu-latest", "self-hosted"]')[github.repository == 'github/docs-internal'] }}
    outputs:
      ver_name:  ${{ steps.info.outputs.ver_name }}
      short_sha:  ${{ steps.info.outputs.short_sha }}
      title:      ${{ steps.info.outputs.title }}
      branch:     ${{ steps.info.outputs.branch }}
      prerelease: ${{ steps.info.outputs.prerelease }}
      notes:      ${{ steps.info.outputs.notes }}

    steps:
    
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          # Only Read The Last 1 Commit
          fetch-depth: 1

      - name: Read & Parse INFO_FILE
        id: info
        shell: bash
        run: |
          set -euo pipefail
          INFO_FILE="${{ inputs.override_info_file }}"
          
          SHA="${{ inputs.override_short_sha }}"
          if [ -z "$SHA" ]; then
            SHA="${GITHUB_SHA::7}"
          fi
          echo "short_sha=$SHA" >> $GITHUB_OUTPUT
          
          # Read file
          CONTENT=$(sed "s/shortSHA/${GITHUB_SHA::7}/g" "$INFO_FILE")

          # --------------- Common ---------------
          
          VER_NAME="${{ inputs.override_ver_name }}"
          if [ -z "$VER_NAME" ]; then
            VER_NAME=$(echo "$CONTENT" | grep '^VER_NAME=' | cut -d= -f2- | tr -d '[:space:]')
            if [ -z "$VER_NAME" ]; then
              echo "VER_NAME missing or empty"
              exit 1
            fi
          fi
          echo "ver_name=$VER_NAME"      >> $GITHUB_OUTPUT
          
          if [ "${{ inputs.override_IsPublish }}" == "true" ]; then
            VER_SUFFIX=""
          elif [ "${{ inputs.build_type }}" == "release" ]; then
            VER_SUFFIX=-dev-"$SHA"
          else
            VER_SUFFIX=-devDebug-"$SHA"
          fi
          echo "ver_suffix=$VER_SUFFIX" >> $GITHUB_OUTPUT
          
          # --------------- Publish Only ---------------
          if [ "${{ inputs.override_IsPublish }}" == "true" ]; then
          
            TITLE_SUFFIX=" $SHA"
            TITLE="${{ inputs.override_title }}"
            if [ -z "$TITLE" ]; then
              TITLE=$(echo "$CONTENT" | grep '^TITLE=' | cut -d= -f2- | tr -d '[:space:]')
              if [ -z "$TITLE" ]; then
                TITLE="${VER_NAME}${TITLE_SUFFIX}"
              fi
            fi
            echo "title=$TITLE"      >> $GITHUB_OUTPUT
            
            BRANCH="${{ inputs.override_branch }}"
            if [ -z "$BRANCH" ]; then
              BRANCH=$(echo "$CONTENT" | grep '^BRANCH=' | cut -d= -f2- | tr -d '[:space:]')
              if [ -z "$BRANCH" ]; then
                echo "BRANCH missing or empty"
                exit 1
              fi
            fi
            echo "branch=$BRANCH"      >> $GITHUB_OUTPUT

            PRERELEASE="${{ inputs.override_prerelease }}"
            if [ -z "$PRERELEASE" ]; then
              PRERELEASE=$(echo "$CONTENT" | grep '^PRERELEASE=' | cut -d= -f2- | tr -d '[:space:]')
              if [ -z "$PRERELEASE" ]; then
                PRERELEASE="true"
              fi
            fi
            echo "prerelease=$PRERELEASE"      >> $GITHUB_OUTPUT
            
            NOTES=$(echo "$CONTENT" | awk 'BEGIN{f=0} /^NOTES=/{f=1; sub(/^NOTES=/,""); print; next} f' || true)
            [ -z "$NOTES" ] && { echo "NOTES missing or empty"; exit 1; }
            
            # Write File Safely
            echo "notes<<EOF" >> $GITHUB_OUTPUT
            echo "$NOTES"     >> $GITHUB_OUTPUT
            echo "EOF"        >> $GITHUB_OUTPUT
          fi

          # ---------- Print Params ----------
          echo ">>>> $INFO_FILE parsed:"
          echo "  ver_name : $VER_NAME"
          echo "  ver_suffix: $VER_SUFFIX"
          echo "  short_sha: $SHA"
          
          if [ "${{ inputs.override_IsPublish }}" == "true" ]; then
            echo "  title    : $TITLE"
            echo "  branch   : $BRANCH"
            echo "  prerelease: $PRERELEASE"
            echo "  notes len : $(echo -n "$NOTES" | wc -c)"
          fi
          
      # ---------- JDK & Gradle ----------
      - name: Set Up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Restore Gradle Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/caches/build-cache-*
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # ---------- Build APK ----------
      - name: Build ${{ inputs.build_type }} APK
        run: |
          ./gradlew :core:app:assemble${{ inputs.build_type }} \
            -PversionSuffix="${{ steps.info.outputs.ver_suffix }}" \
            -PbaseVersion="${{ steps.info.outputs.ver_name }}"

      - name: Show APK_OUTPUT_DIR
        run: ls -laR ${{ env.APK_OUTPUT_DIR }}

      # ---------- Copy & Rename Files----------
      - name: Copy & Rename APK
        run: |
          mkdir -p ${{ env.ARTIFACT_OUTPUT_DIR }}${{ inputs.abi_type }}
          SRC=${{ env.APK_OUTPUT_DIR }}${{ inputs.build_type }}/app-${{ inputs.abi_type }}-${{ inputs.build_type }}.apk
          DST=${{ env.ARTIFACT_OUTPUT_DIR }}${{ inputs.abi_type }}/AndroIDE-${{ inputs.abi_type }}${{ steps.info.outputs.ver_suffix }}.apk
          cp "$SRC" "$DST"
          sha256sum "$DST" > "$DST.sha256"

      - name: Show Artifact Tree
        run: ls -laR ${{ env.ARTIFACT_OUTPUT_DIR }}

      # ---------- Upload Files ----------
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: AndroIDE-${{ inputs.abi_type }}${{ steps.info.outputs.ver_suffix }}
          path: ${{ env.ARTIFACT_OUTPUT_DIR }}${{ inputs.abi_type }}/*

      - name: Upload Mapping (release only, not debug)
        if: ${{ inputs.build_type == 'release' }}
        uses: actions/upload-artifact@v4
        with:
          name: release-mappings-${{ steps.info.outputs.short_sha }}
          path: '**/build/outputs/mapping'

