name: Upload Release

on:
  workflow_dispatch: {}

# Cancel old runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  # ---------- 1. Create git tag ----------
  create_tag:
    runs-on: ubuntu-latest
    outputs:
      ver_name: ${{ steps.info.outputs.ver_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Parse RELEASE_INFO
        id: info
        run: |
          set -euxo pipefail
          INFO_FILE=RELEASE_INFO
          if [ ! -s "$INFO_FILE" ]; then
            echo "$INFO_FILE not found or empty"
            exit 1
          fi
          VER=$(grep '^VER_NAME=' "$INFO_FILE" | cut -d'=' -f2- | tr -d '[:space:]')
          echo "ver_name=$VER" >> $GITHUB_OUTPUT

      - name: Check Branch vs RELEASE_INFO
        run: |
          BRANCH=$(grep '^BRANCH=' RELEASE_INFO | cut -d'=' -f2- | tr -d '[:space:]')
          CURRENT=$(git rev-parse --abbrev-ref HEAD)
          if [ "$CURRENT" != "$BRANCH" ]; then
            echo "Release configured for '$BRANCH', but current is '$CURRENT'"
            exit 1
          fi

      - name: Check If Tag Exist
        run: |
          TAG="${{ steps.info.outputs.ver_name }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
            exit 1
          fi

      - name: Create & Push Tag
        run: |
          TAG="${{ steps.info.outputs.ver_name }}"
          TITLE=$(grep '^TITLE=' RELEASE_INFO | cut -d'=' -f2- | sed 's/shortSHA/'${GITHUB_SHA::7}'/;s/^[[:space:]]*//;s/[[:space:]]*$//' || true)
          [ -z "$TITLE" ] && TITLE="$TAG ${GITHUB_SHA::7}"
          git config user.name  "github-actions"
          git config user.email "actions@github.com"
          git tag -a "$TAG" -m "$TITLE"
          git push origin "$TAG"

  # ---------- 2. Build all ABIs ----------
  build_all_abi:
    needs: create_tag
    strategy:
      fail-fast: false
      matrix:
        #abi_type: ['arm64-v8a', 'armeabi-v7a', 'x86_64']
        abi_type: ['arm64-v8a']
    uses: ./.github/workflows/_build-apk-reusable.yml
    with:
      build_type: release
      abi_type:   ${{ matrix.abi_type }}
      override_IsPublish: true

  # ---------- 3. Get all artifacts and create gitHub release ----------
  publish_release:
    needs: [create_tag, build_all_abi]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download All ABI Artifacts
        uses: actions/download-artifact@v4
        with:
          # The same in _build-apk-reusable.yml
          pattern: AndroIDE*-release
          merge-multiple: true
          path: release_assets/

      - name: Read Release Notes
        id: notes
        run: |
          NOTES=$(awk 'BEGIN{f=0} /^NOTES=/{f=1; sub(/^NOTES=/,""); print; next} f' RELEASE_INFO)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES"     >> $GITHUB_OUTPUT
          echo "EOF"        >> $GITHUB_OUTPUT

      - name: Extract Prerelease Flag
        id: flag
        run: |
          PRERELEASE=$(grep '^PRERELEASE=' RELEASE_INFO | cut -d'=' -f2- | tr -d '[:space:]' || true)
          [ -z "$PRERELEASE" ] && PRERELEASE="true"
          echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create_tag.outputs.ver_name }}
          name:     ${{ needs.create_tag.outputs.ver_name }}
          body:     ${{ steps.notes.outputs.notes }}
          files:    release_assets/*
          draft:    false
          prerelease: ${{ steps.flag.outputs.prerelease == 'true' }}
          make_latest: ${{ steps.flag.outputs.prerelease != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

